name: Detect and Send Notifications on Merge Conflicts

on:
  pull_request_target:
    types: [opened, synchronize]  # Trigger on PR creation and update
    branches:
      - sit

jobs:
  check_merge_conflict:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }}
          
      - name: Check for merge conflicts
        id: check_conflict
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PR_TOKEN}}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER)
          MERGEABLE=$(echo $RESPONSE | jq .mergeable)
          if [ "$MERGEABLE" = "false" ]; then
            echo "Merge conflict detected"
            echo "::set-output name=conflict::true"
          else
            echo "No merge conflicts detected"
            echo "::set-output name=conflict::false"
          fi
      - name: Send Teams notification on merge conflict
        if: steps.check_conflict.outputs.conflict == 'true'
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          PR_LINK="${{ github.event.pull_request.html_url }}"
          curl -H 'Content-Type: application/json' -d '{
            "title": "Merge Conflict Detected",
            "text": "A merge conflict was detected in PR #${{ github.event.number }} raised by ${{ github.event.pull_request.user.login }} targeting branch ${{ github.base_ref }} from ${{ github.head_ref }}.\n\nView the pull request here: ${{ github.event.pull_request.html_url }}",
            "themeColor": "FF0000"
          }' $TEAMS_WEBHOOK_URL
          
      - name: Get PR Author Email
        if: steps.check_conflict.outputs.conflict == 'true'
        id: get_email
        run: |
          EMAIL=$(curl -s -H "Authorization: token ${{ secrets.PR_TOKEN }}" https://api.github.com/users/${{ github.event.pull_request.user.login }} | jq -r '.email')
          if [ "$EMAIL" == "null" ]; then
            echo "No public email found for user. Using default email."
            EMAIL="subhamworks94@gmail.com"
          fi
          echo "::set-output name=email::$EMAIL"
      - name: Send Email on Conflict
        if: steps.check_conflict.outputs.conflict == 'true'
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          PR_LINK="${{ github.event.pull_request.html_url }}"
          curl --request POST \
          --url https://api.sendgrid.com/v3/mail/send \
          --header "Authorization: Bearer $SENDGRID_API_KEY" \
          --header "Content-Type: application/json" \
          --data '{
            "personalizations": [
              {
                "to": [
                  {
                    "email": "${{ steps.get_email.outputs.email }}"
                  }
                ],
                "subject": "Merge Conflict Detected in PR #${{ github.event.number }}"
              }
            ],
            "from": {
              "email": "subham.hota@maersk.com"
            },
            "content": [
              {
                "type": "text/plain",
                "value": "A merge conflict was detected in PR #${{ github.event.number }}  raised by ${{ github.event.pull_request.user.login }} targeting branch ${{ github.base_ref }} from ${{ github.head_ref }}.\n\nView the pull request here: ${{ github.event.pull_request.html_url }}"
              }
            ]
          }'
      
 
